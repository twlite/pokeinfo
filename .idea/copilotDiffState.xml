<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pokeinfo&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pokeinfo&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.constraintlayout)&#10;    implementation(libs.lifecycle.viewmodel)&#10;    implementation(libs.lifecycle.runtime)&#10;&#10;    // Room&#10;    implementation(libs.room.runtime)&#10;    annotationProcessor(libs.room.compiler)&#10;&#10;    // Retrofit + Moshi&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.moshi)&#10;    implementation(libs.moshi)&#10;    implementation(libs.moshi.adapters)&#10;&#10;    // Navigation&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;&#10;    // Glide for image loading&#10;    implementation(libs.glide)&#10;    annotationProcessor(libs.glide.compiler)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;androidx.navigation.safeargs&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.pokeinfo&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.pokeinfo&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.constraintlayout)&#10;    implementation(libs.lifecycle.viewmodel)&#10;    implementation(libs.lifecycle.runtime)&#10;&#10;    // Room&#10;    implementation(libs.room.runtime)&#10;    annotationProcessor(libs.room.compiler)&#10;&#10;    // Retrofit + Moshi&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.moshi)&#10;    implementation(libs.moshi)&#10;    implementation(libs.moshi.adapters)&#10;&#10;    // Navigation&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;&#10;    // Glide for image loading&#10;    implementation(libs.glide)&#10;    annotationProcessor(libs.glide.compiler)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.PokeInfoApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.PokeInfo&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/MainActivity.java" />
              <option name="originalContent" value="package com.example.pokeinfo;&#10;&#10;import android.os.Bundle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.navigation.NavController;&#10;import androidx.navigation.Navigation;&#10;import androidx.navigation.ui.NavigationUI;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);&#10;        BottomNavigationView bottomNav = findViewById(R.id.bottom_nav);&#10;        NavigationUI.setupWithNavController(bottomNav, navController);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.util.Log;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.navigation.NavController;&#13;&#10;import androidx.navigation.fragment.NavHostFragment;&#13;&#10;import androidx.navigation.ui.NavigationUI;&#13;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#13;&#10;&#13;&#10;public class MainActivity extends AppCompatActivity {&#13;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_main);&#13;&#10;&#13;&#10;        try {&#13;&#10;            NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager()&#13;&#10;                .findFragmentById(R.id.nav_host_fragment);&#13;&#10;            &#13;&#10;            if (navHostFragment != null) {&#13;&#10;                NavController navController = navHostFragment.getNavController();&#13;&#10;                BottomNavigationView bottomNav = findViewById(R.id.bottom_nav);&#13;&#10;                NavigationUI.setupWithNavController(bottomNav, navController);&#13;&#10;            } else {&#13;&#10;                Log.e(TAG, &quot;NavHostFragment not found&quot;);&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            Log.e(TAG, &quot;Error setting up navigation: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/PokeInfoApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/PokeInfoApplication.java" />
              <option name="updatedContent" value="package com.example.pokeinfo;&#10;&#10;import android.app.Application;&#10;import com.example.pokeinfo.data.db.AppDatabase;&#10;&#10;public class PokeInfoApplication extends Application {&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        // Initialize the database&#10;        AppDatabase.getInstance(this);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/api/PokemonApiService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/api/PokemonApiService.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.api;&#10;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import retrofit2.Call;&#10;import retrofit2.http.GET;&#10;import retrofit2.http.Path;&#10;import retrofit2.http.Query;&#10;&#10;public interface PokemonApiService {&#10;    @GET(&quot;pokemon&quot;)&#10;    Call&lt;PokemonListResponse&gt; getPokemonList(@Query(&quot;limit&quot;) int limit, @Query(&quot;offset&quot;) int offset);&#10;&#10;    @GET(&quot;pokemon/{name}&quot;)&#10;    Call&lt;Pokemon&gt; getPokemonDetails(@Path(&quot;name&quot;) String name);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/api/PokemonListResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/api/PokemonListResponse.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.api;&#10;&#10;import com.squareup.moshi.Json;&#10;import java.util.List;&#10;&#10;public class PokemonListResponse {&#10;    private int count;&#10;    private List&lt;PokemonListItem&gt; results;&#10;&#10;    public int getCount() {&#10;        return count;&#10;    }&#10;&#10;    public void setCount(int count) {&#10;        this.count = count;&#10;    }&#10;&#10;    public List&lt;PokemonListItem&gt; getResults() {&#10;        return results;&#10;    }&#10;&#10;    public void setResults(List&lt;PokemonListItem&gt; results) {&#10;        this.results = results;&#10;    }&#10;&#10;    public static class PokemonListItem {&#10;        private String name;&#10;        private String url;&#10;&#10;        public String getName() {&#10;            return name;&#10;        }&#10;&#10;        public void setName(String name) {&#10;            this.name = name;&#10;        }&#10;&#10;        public String getUrl() {&#10;            return url;&#10;        }&#10;&#10;        public void setUrl(String url) {&#10;            this.url = url;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/AppDatabase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/AppDatabase.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.db;&#10;&#10;import android.content.Context;&#10;import androidx.room.Database;&#10;import androidx.room.Room;&#10;import androidx.room.RoomDatabase;&#10;import androidx.room.TypeConverters;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;&#10;@Database(entities = {Pokemon.class}, version = 1)&#10;@TypeConverters({Converters.class})&#10;public abstract class AppDatabase extends RoomDatabase {&#10;    private static volatile AppDatabase INSTANCE;&#10;&#10;    public abstract PokemonDao pokemonDao();&#10;&#10;    public static AppDatabase getInstance(Context context) {&#10;        if (INSTANCE == null) {&#10;            synchronized (AppDatabase.class) {&#10;                if (INSTANCE == null) {&#10;                    INSTANCE = Room.databaseBuilder(&#10;                            context.getApplicationContext(),&#10;                            AppDatabase.class,&#10;                            &quot;pokemon_database&quot;&#10;                    ).build();&#10;                }&#10;            }&#10;        }&#10;        return INSTANCE;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/Converters.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/Converters.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.db;&#10;&#10;import androidx.room.TypeConverter;&#10;import com.example.pokeinfo.data.model.PokemonSprites;&#10;import com.example.pokeinfo.data.model.PokemonType;&#10;import com.squareup.moshi.JsonAdapter;&#10;import com.squareup.moshi.Moshi;&#10;import com.squareup.moshi.Types;&#10;import java.lang.reflect.Type;&#10;import java.util.List;&#10;&#10;public class Converters {&#10;    private final Moshi moshi;&#10;    private final JsonAdapter&lt;PokemonSprites&gt; spritesAdapter;&#10;    private final JsonAdapter&lt;List&lt;PokemonType&gt;&gt; typesAdapter;&#10;&#10;    public Converters() {&#10;        moshi = new Moshi.Builder().build();&#10;        spritesAdapter = moshi.adapter(PokemonSprites.class);&#10;        Type listType = Types.newParameterizedType(List.class, PokemonType.class);&#10;        typesAdapter = moshi.adapter(listType);&#10;    }&#10;&#10;    @TypeConverter&#10;    public String fromPokemonSprites(PokemonSprites sprites) {&#10;        return sprites != null ? spritesAdapter.toJson(sprites) : null;&#10;    }&#10;&#10;    @TypeConverter&#10;    public PokemonSprites toPokemonSprites(String value) {&#10;        try {&#10;            return value != null ? spritesAdapter.fromJson(value) : null;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @TypeConverter&#10;    public String fromTypeList(List&lt;PokemonType&gt; types) {&#10;        return types != null ? typesAdapter.toJson(types) : null;&#10;    }&#10;&#10;    @TypeConverter&#10;    public List&lt;PokemonType&gt; toTypeList(String value) {&#10;        try {&#10;            return value != null ? typesAdapter.fromJson(value) : null;&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/Converters.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/Converters.kt" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.db&#10;&#10;import androidx.room.TypeConverter&#10;import com.example.pokeinfo.data.model.PokemonSprites&#10;import com.example.pokeinfo.data.model.PokemonType&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.Types&#10;&#10;class Converters {&#10;    private val moshi = Moshi.Builder().build()&#10;&#10;    @TypeConverter&#10;    fun fromPokemonSprites(sprites: PokemonSprites): String {&#10;        return moshi.adapter(PokemonSprites::class.java).toJson(sprites)&#10;    }&#10;&#10;    @TypeConverter&#10;    fun toPokemonSprites(value: String): PokemonSprites {&#10;        return moshi.adapter(PokemonSprites::class.java).fromJson(value)!!&#10;    }&#10;&#10;    @TypeConverter&#10;    fun fromTypeList(types: List&lt;PokemonType&gt;): String {&#10;        val type = Types.newParameterizedType(List::class.java, PokemonType::class.java)&#10;        return moshi.adapter&lt;List&lt;PokemonType&gt;&gt;(type).toJson(types)&#10;    }&#10;&#10;    @TypeConverter&#10;    fun toTypeList(value: String): List&lt;PokemonType&gt; {&#10;        val type = Types.newParameterizedType(List::class.java, PokemonType::class.java)&#10;        return moshi.adapter&lt;List&lt;PokemonType&gt;&gt;(type).fromJson(value)!!&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/PokemonDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/db/PokemonDao.java" />
              <option name="originalContent" value="package com.example.pokeinfo.data.db;&#10;&#10;import androidx.lifecycle.LiveData;&#10;import androidx.room.Dao;&#10;import androidx.room.Insert;&#10;import androidx.room.OnConflictStrategy;&#10;import androidx.room.Query;&#10;import androidx.room.Update;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import java.util.List;&#10;&#10;@Dao&#10;public interface PokemonDao {&#10;    @Query(&quot;SELECT * FROM pokemons&quot;)&#10;    LiveData&lt;List&lt;Pokemon&gt;&gt; getAllPokemons();&#10;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE isFavorite = 1&quot;)&#10;    LiveData&lt;List&lt;Pokemon&gt;&gt; getFavoritePokemons();&#10;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE name LIKE '%' || :query || '%'&quot;)&#10;    LiveData&lt;List&lt;Pokemon&gt;&gt; searchPokemons(String query);&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    void insertAll(List&lt;Pokemon&gt; pokemons);&#10;&#10;    @Update&#10;    void update(Pokemon pokemon);&#10;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE name = :name&quot;)&#10;    Pokemon getPokemonByName(String name);&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.db;&#13;&#10;&#13;&#10;import androidx.lifecycle.LiveData;&#13;&#10;import androidx.room.Dao;&#13;&#10;import androidx.room.Insert;&#13;&#10;import androidx.room.OnConflictStrategy;&#13;&#10;import androidx.room.Query;&#13;&#10;import androidx.room.Update;&#13;&#10;import com.example.pokeinfo.data.model.Pokemon;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Dao&#13;&#10;public interface PokemonDao {&#13;&#10;    @Query(&quot;SELECT * FROM pokemons&quot;)&#13;&#10;    LiveData&lt;List&lt;Pokemon&gt;&gt; getAllPokemons();&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM pokemons&quot;)&#13;&#10;    List&lt;Pokemon&gt; getAllPokemonsSync();&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE isFavorite = 1&quot;)&#13;&#10;    LiveData&lt;List&lt;Pokemon&gt;&gt; getFavoritePokemons();&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE name LIKE :query&quot;)&#13;&#10;    LiveData&lt;List&lt;Pokemon&gt;&gt; searchPokemons(String query);&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE name LIKE :query&quot;)&#13;&#10;    List&lt;Pokemon&gt; searchPokemonsSync(String query);&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM pokemons WHERE name = :name&quot;)&#13;&#10;    Pokemon getPokemonByName(String name);&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    void insertAll(List&lt;Pokemon&gt; pokemons);&#13;&#10;&#13;&#10;    @Update&#13;&#10;    void update(Pokemon pokemon);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/Pokemon.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/Pokemon.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.model;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.PrimaryKey;&#10;import com.squareup.moshi.Json;&#10;&#10;@Entity(tableName = &quot;pokemons&quot;)&#10;public class Pokemon {&#10;    @PrimaryKey&#10;    private int id;&#10;    private String name;&#10;    @Json(name = &quot;sprites&quot;)&#10;    private PokemonSprites imageUrl;&#10;    private java.util.List&lt;PokemonType&gt; types;&#10;    private boolean isFavorite;&#10;&#10;    public Pokemon() {&#10;        this.isFavorite = false;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public PokemonSprites getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public void setImageUrl(PokemonSprites imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public java.util.List&lt;PokemonType&gt; getTypes() {&#10;        return types;&#10;    }&#10;&#10;    public void setTypes(java.util.List&lt;PokemonType&gt; types) {&#10;        this.types = types;&#10;    }&#10;&#10;    public boolean isFavorite() {&#10;        return isFavorite;&#10;    }&#10;&#10;    public void setFavorite(boolean favorite) {&#10;        isFavorite = favorite;&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Pokemon pokemon = (Pokemon) o;&#10;        return id == pokemon.id;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return java.util.Objects.hash(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/Pokemon.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/Pokemon.kt" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.model&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import com.squareup.moshi.Json&#10;import com.squareup.moshi.JsonClass&#10;&#10;@Entity(tableName = &quot;pokemons&quot;)&#10;@JsonClass(generateAdapter = true)&#10;data class Pokemon(&#10;    @PrimaryKey&#10;    val id: Int,&#10;    val name: String,&#10;    @Json(name = &quot;sprites&quot;)&#10;    val imageUrl: PokemonSprites,&#10;    val types: List&lt;PokemonType&gt;,&#10;    var isFavorite: Boolean = false&#10;)&#10;&#10;@JsonClass(generateAdapter = true)&#10;data class PokemonSprites(&#10;    @Json(name = &quot;front_default&quot;)&#10;    val frontDefault: String&#10;)&#10;&#10;@JsonClass(generateAdapter = true)&#10;data class PokemonType(&#10;    val slot: Int,&#10;    val type: Type&#10;)&#10;&#10;@JsonClass(generateAdapter = true)&#10;data class Type(&#10;    val name: String&#10;)&#10;&#10;data class PokemonListResponse(&#10;    val count: Int,&#10;    val results: List&lt;PokemonListItem&gt;&#10;)&#10;&#10;@JsonClass(generateAdapter = true)&#10;data class PokemonListItem(&#10;    val name: String,&#10;    val url: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/PokemonSprites.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/PokemonSprites.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.model;&#10;&#10;import com.squareup.moshi.Json;&#10;&#10;public class PokemonSprites {&#10;    @Json(name = &quot;front_default&quot;)&#10;    private String frontDefault;&#10;&#10;    public String getFrontDefault() {&#10;        return frontDefault;&#10;    }&#10;&#10;    public void setFrontDefault(String frontDefault) {&#10;        this.frontDefault = frontDefault;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/PokemonType.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/PokemonType.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.model;&#10;&#10;public class PokemonType {&#10;    private int slot;&#10;    private Type type;&#10;&#10;    public int getSlot() {&#10;        return slot;&#10;    }&#10;&#10;    public void setSlot(int slot) {&#10;        this.slot = slot;&#10;    }&#10;&#10;    public Type getType() {&#10;        return type;&#10;    }&#10;&#10;    public void setType(Type type) {&#10;        this.type = type;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/Type.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/data/model/Type.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.data.model;&#10;&#10;public class Type {&#10;    private String name;&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/adapters/PokemonAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/adapters/PokemonAdapter.java" />
              <option name="originalContent" value="package com.example.pokeinfo.ui.adapters;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.DiffUtil;&#10;import androidx.recyclerview.widget.ListAdapter;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import com.example.pokeinfo.databinding.ItemPokemonBinding;&#10;import com.google.android.material.chip.Chip;&#10;import com.bumptech.glide.Glide;&#10;&#10;public class PokemonAdapter extends ListAdapter&lt;Pokemon, PokemonAdapter.PokemonViewHolder&gt; {&#10;    private OnPokemonClickListener clickListener;&#10;&#10;    public interface OnPokemonClickListener {&#10;        void onPokemonClick(Pokemon pokemon);&#10;    }&#10;&#10;    public PokemonAdapter(OnPokemonClickListener listener) {&#10;        super(new PokemonDiffCallback());&#10;        this.clickListener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public PokemonViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        ItemPokemonBinding binding = ItemPokemonBinding.inflate(&#10;            LayoutInflater.from(parent.getContext()), parent, false);&#10;        return new PokemonViewHolder(binding, clickListener);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull PokemonViewHolder holder, int position) {&#10;        holder.bind(getItem(position));&#10;    }&#10;&#10;    static class PokemonViewHolder extends RecyclerView.ViewHolder {&#10;        private final ItemPokemonBinding binding;&#10;        private final OnPokemonClickListener listener;&#10;&#10;        PokemonViewHolder(ItemPokemonBinding binding, OnPokemonClickListener listener) {&#10;            super(binding.getRoot());&#10;            this.binding = binding;&#10;            this.listener = listener;&#10;        }&#10;&#10;        void bind(Pokemon pokemon) {&#10;            binding.pokemonName.setText(pokemon.getName());&#10;&#10;            // Load image using Glide&#10;            Glide.with(binding.pokemonImage)&#10;                .load(pokemon.getImageUrl().getFrontDefault())&#10;                .into(binding.pokemonImage);&#10;&#10;            // Set up type chips&#10;            binding.typeChipGroup.removeAllViews();&#10;            for (PokemonType type : pokemon.getTypes()) {&#10;                Chip chip = new Chip(binding.getRoot().getContext());&#10;                chip.setText(type.getType().getName());&#10;                binding.typeChipGroup.addView(chip);&#10;            }&#10;&#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onPokemonClick(pokemon);&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    static class PokemonDiffCallback extends DiffUtil.ItemCallback&lt;Pokemon&gt; {&#10;        @Override&#10;        public boolean areItemsTheSame(@NonNull Pokemon oldItem, @NonNull Pokemon newItem) {&#10;            return oldItem.getId() == newItem.getId();&#10;        }&#10;&#10;        @Override&#10;        public boolean areContentsTheSame(@NonNull Pokemon oldItem, @NonNull Pokemon newItem) {&#10;            return oldItem.equals(newItem);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.adapters;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.DiffUtil;&#10;import androidx.recyclerview.widget.ListAdapter;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import com.example.pokeinfo.data.model.PokemonType;&#10;import com.example.pokeinfo.databinding.ItemPokemonBinding;&#10;import com.google.android.material.chip.Chip;&#10;import com.bumptech.glide.Glide;&#10;&#10;public class PokemonAdapter extends ListAdapter&lt;Pokemon, PokemonAdapter.PokemonViewHolder&gt; {&#10;    private OnPokemonClickListener clickListener;&#10;&#10;    public interface OnPokemonClickListener {&#10;        void onPokemonClick(Pokemon pokemon);&#10;    }&#10;&#10;    public PokemonAdapter(OnPokemonClickListener listener) {&#10;        super(new PokemonDiffCallback());&#10;        this.clickListener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public PokemonViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        ItemPokemonBinding binding = ItemPokemonBinding.inflate(&#10;            LayoutInflater.from(parent.getContext()), parent, false);&#10;        return new PokemonViewHolder(binding, clickListener);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull PokemonViewHolder holder, int position) {&#10;        holder.bind(getItem(position));&#10;    }&#10;&#10;    static class PokemonViewHolder extends RecyclerView.ViewHolder {&#10;        private final ItemPokemonBinding binding;&#10;        private final OnPokemonClickListener listener;&#10;&#10;        PokemonViewHolder(ItemPokemonBinding binding, OnPokemonClickListener listener) {&#10;            super(binding.getRoot());&#10;            this.binding = binding;&#10;            this.listener = listener;&#10;        }&#10;&#10;        void bind(Pokemon pokemon) {&#10;            binding.pokemonName.setText(pokemon.getName());&#10;&#10;            // Load image using Glide&#10;            Glide.with(binding.pokemonImage)&#10;                .load(pokemon.getImageUrl().getFrontDefault())&#10;                .into(binding.pokemonImage);&#10;&#10;            // Set up type chips&#10;            binding.typeChipGroup.removeAllViews();&#10;            for (PokemonType type : pokemon.getTypes()) {&#10;                Chip chip = new Chip(binding.getRoot().getContext());&#10;                chip.setText(type.getType().getName());&#10;                binding.typeChipGroup.addView(chip);&#10;            }&#10;&#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onPokemonClick(pokemon);&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    static class PokemonDiffCallback extends DiffUtil.ItemCallback&lt;Pokemon&gt; {&#10;        @Override&#10;        public boolean areItemsTheSame(@NonNull Pokemon oldItem, @NonNull Pokemon newItem) {&#10;            return oldItem.getId() == newItem.getId();&#10;        }&#10;&#10;        @Override&#10;        public boolean areContentsTheSame(@NonNull Pokemon oldItem, @NonNull Pokemon newItem) {&#10;            return oldItem.equals(newItem);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/details/PokemonDetailsFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/details/PokemonDetailsFragment.java" />
              <option name="originalContent" value="package com.example.pokeinfo.ui.details;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuInflater;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.lifecycle.ViewModelProvider;&#10;import com.bumptech.glide.Glide;&#10;import com.example.pokeinfo.R;&#10;import com.example.pokeinfo.databinding.FragmentPokemonDetailsBinding;&#10;import com.example.pokeinfo.data.model.PokemonType;&#10;import com.google.android.material.chip.Chip;&#10;&#10;public class PokemonDetailsFragment extends Fragment {&#10;    private FragmentPokemonDetailsBinding binding;&#10;    private PokemonDetailsViewModel viewModel;&#10;    private MenuItem favoriteMenuItem;&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setHasOptionsMenu(true);&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        binding = FragmentPokemonDetailsBinding.inflate(inflater, container, false);&#10;        return binding.getRoot();&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        String pokemonName = PokemonDetailsFragmentArgs.fromBundle(getArguments()).getPokemonName();&#10;        viewModel = new ViewModelProvider(this).get(PokemonDetailsViewModel.class);&#10;        viewModel.loadPokemon(pokemonName);&#10;&#10;        binding.toolbar.setNavigationOnClickListener(v -&gt; requireActivity().onBackPressed());&#10;&#10;        observeViewModel();&#10;    }&#10;&#10;    private void observeViewModel() {&#10;        viewModel.getPokemon().observe(getViewLifecycleOwner(), pokemon -&gt; {&#10;            if (pokemon != null) {&#10;                binding.pokemonName.setText(pokemon.getName());&#10;                Glide.with(this)&#10;                    .load(pokemon.getImageUrl().getFrontDefault())&#10;                    .into(binding.pokemonImage);&#10;&#10;                binding.typeChipGroup.removeAllViews();&#10;                for (PokemonType type : pokemon.getTypes()) {&#10;                    Chip chip = new Chip(requireContext());&#10;                    chip.setText(type.getType().getName());&#10;                    binding.typeChipGroup.addView(chip);&#10;                }&#10;&#10;                if (favoriteMenuItem != null) {&#10;                    favoriteMenuItem.setIcon(pokemon.isFavorite()&#10;                        ? R.drawable.ic_favorite&#10;                        : R.drawable.ic_favorite_border);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {&#10;        inflater.inflate(R.menu.menu_details, menu);&#10;        favoriteMenuItem = menu.findItem(R.id.action_favorite);&#10;        super.onCreateOptionsMenu(menu, inflater);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == R.id.action_favorite) {&#10;            viewModel.toggleFavorite();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.details;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.lifecycle.ViewModelProvider;&#10;import com.bumptech.glide.Glide;&#10;import com.example.pokeinfo.databinding.FragmentPokemonDetailsBinding;&#10;import com.example.pokeinfo.data.model.PokemonType;&#10;import com.google.android.material.chip.Chip;&#10;&#10;public class PokemonDetailsFragment extends Fragment {&#10;    private FragmentPokemonDetailsBinding binding;&#10;    private PokemonDetailsViewModel viewModel;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        binding = FragmentPokemonDetailsBinding.inflate(inflater, container, false);&#10;        return binding.getRoot();&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        &#10;        String pokemonName = PokemonDetailsFragmentArgs.fromBundle(getArguments()).getPokemonName();&#10;        viewModel = new ViewModelProvider(this).get(PokemonDetailsViewModel.class);&#10;        viewModel.loadPokemon(pokemonName);&#10;        &#10;        binding.toolbar.setNavigationOnClickListener(v -&gt; requireActivity().onBackPressed());&#10;        &#10;        binding.favoriteButton.setOnClickListener(v -&gt; viewModel.toggleFavorite());&#10;        &#10;        observeViewModel();&#10;    }&#10;&#10;    private void observeViewModel() {&#10;        viewModel.getPokemon().observe(getViewLifecycleOwner(), pokemon -&gt; {&#10;            if (pokemon != null) {&#10;                binding.pokemonName.setText(pokemon.getName());&#10;                Glide.with(this)&#10;                    .load(pokemon.getImageUrl().getFrontDefault())&#10;                    .into(binding.pokemonImage);&#10;&#10;                binding.typeChipGroup.removeAllViews();&#10;                for (PokemonType type : pokemon.getTypes()) {&#10;                    Chip chip = new Chip(requireContext());&#10;                    chip.setText(type.getType().getName());&#10;                    binding.typeChipGroup.addView(chip);&#10;                }&#10;&#10;                // Update favorite button text based on state&#10;                binding.favoriteButton.setText(pokemon.isFavorite() &#10;                    ? &quot;Remove from Favorites&quot; &#10;                    : &quot;Add to Favorites&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/details/PokemonDetailsViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/details/PokemonDetailsViewModel.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.details;&#10;&#10;import android.app.Application;&#10;import androidx.lifecycle.AndroidViewModel;&#10;import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import com.example.pokeinfo.data.db.AppDatabase;&#10;import java.util.concurrent.Executors;&#10;&#10;public class PokemonDetailsViewModel extends AndroidViewModel {&#10;    private final AppDatabase database;&#10;    private final MutableLiveData&lt;Pokemon&gt; pokemon = new MutableLiveData&lt;&gt;();&#10;    private String currentPokemonName;&#10;&#10;    public PokemonDetailsViewModel(Application application) {&#10;        super(application);&#10;        database = AppDatabase.getInstance(application);&#10;    }&#10;&#10;    public void loadPokemon(String name) {&#10;        currentPokemonName = name;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            Pokemon pokemonData = database.pokemonDao().getPokemonByName(name);&#10;            pokemon.postValue(pokemonData);&#10;        });&#10;    }&#10;&#10;    public void toggleFavorite() {&#10;        Pokemon currentPokemon = pokemon.getValue();&#10;        if (currentPokemon != null) {&#10;            currentPokemon.setFavorite(!currentPokemon.isFavorite());&#10;            pokemon.setValue(currentPokemon);&#10;            &#10;            Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                database.pokemonDao().update(currentPokemon);&#10;            });&#10;        }&#10;    }&#10;&#10;    public LiveData&lt;Pokemon&gt; getPokemon() {&#10;        return pokemon;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/favorites/FavoritesFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/favorites/FavoritesFragment.java" />
              <option name="originalContent" value="package com.example.pokeinfo.ui.favorites;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.lifecycle.ViewModelProvider;&#10;import androidx.navigation.Navigation;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import com.example.pokeinfo.databinding.FragmentFavoritesBinding;&#10;import com.example.pokeinfo.ui.adapters.PokemonAdapter;&#10;import com.example.pokeinfo.model.Pokemon;&#10;&#10;public class FavoritesFragment extends Fragment implements PokemonAdapter.OnPokemonClickListener {&#10;    private FragmentFavoritesBinding binding;&#10;    private FavoritesViewModel viewModel;&#10;    private PokemonAdapter adapter;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        binding = FragmentFavoritesBinding.inflate(inflater, container, false);&#10;        return binding.getRoot();&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        viewModel = new ViewModelProvider(this).get(FavoritesViewModel.class);&#10;        setupRecyclerView();&#10;        observeViewModel();&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new PokemonAdapter(this);&#10;        binding.favoriteRecyclerView.setAdapter(adapter);&#10;        binding.favoriteRecyclerView.setLayoutManager(new GridLayoutManager(requireContext(), 2));&#10;    }&#10;&#10;    private void observeViewModel() {&#10;        viewModel.getFavoritePokemons().observe(getViewLifecycleOwner(), pokemons -&gt; {&#10;            adapter.submitList(pokemons);&#10;            binding.emptyView.setVisibility(pokemons.isEmpty() ? View.VISIBLE : View.GONE);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onPokemonClick(Pokemon pokemon) {&#10;        FavoritesFragmentDirections.ActionFavoritesToDetails action =&#10;            FavoritesFragmentDirections.actionFavoritesToDetails(pokemon.getName());&#10;        Navigation.findNavController(requireView()).navigate(action);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.favorites;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.lifecycle.ViewModelProvider;&#10;import androidx.navigation.Navigation;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import com.example.pokeinfo.databinding.FragmentFavoritesBinding;&#10;import com.example.pokeinfo.ui.adapters.PokemonAdapter;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;&#10;public class FavoritesFragment extends Fragment implements PokemonAdapter.OnPokemonClickListener {&#10;    private FragmentFavoritesBinding binding;&#10;    private FavoritesViewModel viewModel;&#10;    private PokemonAdapter adapter;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        binding = FragmentFavoritesBinding.inflate(inflater, container, false);&#10;        return binding.getRoot();&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        viewModel = new ViewModelProvider(this).get(FavoritesViewModel.class);&#10;        setupRecyclerView();&#10;        observeViewModel();&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new PokemonAdapter(this);&#10;        binding.favoriteRecyclerView.setAdapter(adapter);&#10;        binding.favoriteRecyclerView.setLayoutManager(new GridLayoutManager(requireContext(), 2));&#10;    }&#10;&#10;    private void observeViewModel() {&#10;        viewModel.getFavoritePokemons().observe(getViewLifecycleOwner(), pokemons -&gt; {&#10;            adapter.submitList(pokemons);&#10;            binding.emptyView.setVisibility(pokemons.isEmpty() ? View.VISIBLE : View.GONE);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onPokemonClick(Pokemon pokemon) {&#10;        FavoritesFragmentDirections.ActionFavoritesToDetails action =&#10;            FavoritesFragmentDirections.actionFavoritesToDetails(pokemon.getName());&#10;        Navigation.findNavController(requireView()).navigate(action);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/favorites/FavoritesViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/favorites/FavoritesViewModel.java" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.favorites;&#10;&#10;import android.app.Application;&#10;import androidx.lifecycle.AndroidViewModel;&#10;import androidx.lifecycle.LiveData;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import com.example.pokeinfo.data.db.AppDatabase;&#10;import java.util.List;&#10;&#10;public class FavoritesViewModel extends AndroidViewModel {&#10;    private final AppDatabase database;&#10;&#10;    public FavoritesViewModel(Application application) {&#10;        super(application);&#10;        database = AppDatabase.getInstance(application);&#10;    }&#10;&#10;    public LiveData&lt;List&lt;Pokemon&gt;&gt; getFavoritePokemons() {&#10;        return database.pokemonDao().getFavoritePokemons();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/home/HomeFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/home/HomeFragment.java" />
              <option name="originalContent" value="package com.example.pokeinfo.ui.home;&#10;&#10;import android.os.Bundle;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.lifecycle.ViewModelProvider;&#10;import androidx.navigation.Navigation;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import com.example.pokeinfo.databinding.FragmentHomeBinding;&#10;import com.example.pokeinfo.ui.adapters.PokemonAdapter;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;&#10;public class HomeFragment extends Fragment implements PokemonAdapter.OnPokemonClickListener {&#10;    private static final String TAG = &quot;HomeFragment&quot;;&#10;    private FragmentHomeBinding binding;&#10;    private HomeViewModel viewModel;&#10;    private PokemonAdapter adapter;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        try {&#10;            binding = FragmentHomeBinding.inflate(inflater, container, false);&#10;            return binding.getRoot();&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error in onCreateView: &quot; + e.getMessage());&#10;            return new View(requireContext());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        try {&#10;            viewModel = new ViewModelProvider(this).get(HomeViewModel.class);&#10;            setupRecyclerView();&#10;            setupSearch();&#10;            observeViewModel();&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error in onViewCreated: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        try {&#10;            adapter = new PokemonAdapter(this);&#10;            binding.pokemonRecyclerView.setAdapter(adapter);&#10;            binding.pokemonRecyclerView.setLayoutManager(new GridLayoutManager(requireContext(), 2));&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error setting up RecyclerView: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void setupSearch() {&#10;        binding.searchEditText.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                viewModel.searchPokemons(s.toString());&#10;            }&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {}&#10;        });&#10;    }&#10;&#10;    private void observeViewModel() {&#10;        viewModel.getPokemons().observe(getViewLifecycleOwner(), pokemons -&gt; {&#10;            adapter.submitList(pokemons);&#10;        });&#10;&#10;        viewModel.getIsLoading().observe(getViewLifecycleOwner(), isLoading -&gt; {&#10;            binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onPokemonClick(Pokemon pokemon) {&#10;        HomeFragmentDirections.ActionHomeToDetails action =&#10;            HomeFragmentDirections.actionHomeToDetails(pokemon.getName());&#10;        Navigation.findNavController(requireView()).navigate(action);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.home;&#10;&#10;import android.os.Bundle;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.lifecycle.ViewModelProvider;&#10;import androidx.navigation.Navigation;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import com.example.pokeinfo.databinding.FragmentHomeBinding;&#10;import com.example.pokeinfo.ui.adapters.PokemonAdapter;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;&#10;public class HomeFragment extends Fragment implements PokemonAdapter.OnPokemonClickListener {&#10;    private static final String TAG = &quot;HomeFragment&quot;;&#10;    private FragmentHomeBinding binding;&#10;    private HomeViewModel viewModel;&#10;    private PokemonAdapter adapter;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        try {&#10;            binding = FragmentHomeBinding.inflate(inflater, container, false);&#10;            return binding.getRoot();&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error in onCreateView: &quot; + e.getMessage());&#10;            return new View(requireContext());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        try {&#10;            viewModel = new ViewModelProvider(this).get(HomeViewModel.class);&#10;            setupRecyclerView();&#10;            setupSearch();&#10;            observeViewModel();&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error in onViewCreated: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        try {&#10;            adapter = new PokemonAdapter(this);&#10;            binding.pokemonRecyclerView.setAdapter(adapter);&#10;            binding.pokemonRecyclerView.setLayoutManager(new GridLayoutManager(requireContext(), 2));&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error setting up RecyclerView: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void setupSearch() {&#10;        binding.searchEditText.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH) {&#10;                String query = binding.searchEditText.getText().toString();&#10;                viewModel.searchPokemons(query);&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void observeViewModel() {&#10;        viewModel.getPokemons().observe(getViewLifecycleOwner(), pokemons -&gt; {&#10;            adapter.submitList(pokemons);&#10;        });&#10;&#10;        viewModel.getIsLoading().observe(getViewLifecycleOwner(), isLoading -&gt; {&#10;            binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onPokemonClick(Pokemon pokemon) {&#10;        HomeFragmentDirections.ActionHomeToDetails action =&#10;            HomeFragmentDirections.actionHomeToDetails(pokemon.getName());&#10;        Navigation.findNavController(requireView()).navigate(action);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/home/HomeViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pokeinfo/ui/home/HomeViewModel.java" />
              <option name="originalContent" value="package com.example.pokeinfo.ui.home;&#10;&#10;import android.app.Application;&#10;import android.util.Log;&#10;import androidx.lifecycle.AndroidViewModel;&#10;import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import com.example.pokeinfo.data.db.AppDatabase;&#10;import com.example.pokeinfo.data.api.PokemonApiService;&#10;import com.example.pokeinfo.data.api.PokemonListResponse;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;import java.util.concurrent.Executors;&#10;&#10;public class HomeViewModel extends AndroidViewModel {&#10;    private static final String TAG = &quot;HomeViewModel&quot;;&#10;    private final AppDatabase database;&#10;    private final PokemonApiService apiService;&#10;    private final MutableLiveData&lt;List&lt;Pokemon&gt;&gt; pokemons = new MutableLiveData&lt;&gt;();&#10;    private final MutableLiveData&lt;Boolean&gt; isLoading = new MutableLiveData&lt;&gt;(false);&#10;&#10;    public HomeViewModel(Application application) {&#10;        super(application);&#10;        database = AppDatabase.getInstance(application);&#10;&#10;        Retrofit retrofit = new Retrofit.Builder()&#10;            .baseUrl(&quot;https://pokeapi.co/api/v2/&quot;)&#10;            .addConverterFactory(MoshiConverterFactory.create())&#10;            .build();&#10;&#10;        apiService = retrofit.create(PokemonApiService.class);&#10;        loadInitialPokemonList();&#10;    }&#10;&#10;    private void loadInitialPokemonList() {&#10;        isLoading.setValue(true);&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            List&lt;Pokemon&gt; cachedPokemons = database.pokemonDao().getAllPokemonsSync();&#10;            if (cachedPokemons != null &amp;&amp; !cachedPokemons.isEmpty()) {&#10;                pokemons.postValue(cachedPokemons);&#10;                isLoading.postValue(false);&#10;            } else {&#10;                fetchFromApi(20, 0);&#10;            }&#10;        });&#10;    }&#10;&#10;    public void searchPokemons(String query) {&#10;        if (query == null || query.trim().isEmpty()) {&#10;            loadInitialPokemonList();&#10;            return;&#10;        }&#10;&#10;        isLoading.setValue(true);&#10;&#10;        // First search in local database&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            List&lt;Pokemon&gt; localResults = database.pokemonDao().searchPokemonsSync(&quot;%&quot; + query + &quot;%&quot;);&#10;            pokemons.postValue(localResults);&#10;&#10;            // If no local results, search in API&#10;            if (localResults == null || localResults.isEmpty()) {&#10;                searchInApi(query);&#10;            } else {&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void searchInApi(String query) {&#10;        apiService.getPokemonDetails(query.toLowerCase()).enqueue(new Callback&lt;Pokemon&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Pokemon&gt; call, Response&lt;Pokemon&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    Pokemon pokemon = response.body();&#10;                    Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                        database.pokemonDao().insertAll(java.util.Collections.singletonList(pokemon));&#10;                        pokemons.postValue(java.util.Collections.singletonList(pokemon));&#10;                    });&#10;                }&#10;                isLoading.postValue(false);&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Pokemon&gt; call, Throwable t) {&#10;                Log.e(TAG, &quot;Error searching pokemon in API: &quot; + t.getMessage());&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void fetchFromApi(int limit, int offset) {&#10;        apiService.getPokemonList(limit, offset).enqueue(new Callback&lt;PokemonListResponse&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;PokemonListResponse&gt; call, Response&lt;PokemonListResponse&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    for (PokemonListResponse.PokemonListItem item : response.body().getResults()) {&#10;                        fetchPokemonDetails(item.getName());&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;PokemonListResponse&gt; call, Throwable t) {&#10;                Log.e(TAG, &quot;Error fetching pokemon list: &quot; + t.getMessage());&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void fetchPokemonDetails(String name) {&#10;        apiService.getPokemonDetails(name).enqueue(new Callback&lt;Pokemon&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Pokemon&gt; call, Response&lt;Pokemon&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    Pokemon pokemon = response.body();&#10;                    Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                        database.pokemonDao().insertAll(java.util.Collections.singletonList(pokemon));&#10;                        // Update the LiveData with all cached pokemons&#10;                        pokemons.postValue(database.pokemonDao().getAllPokemonsSync());&#10;                    });&#10;                }&#10;                isLoading.postValue(false);&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Pokemon&gt; call, Throwable t) {&#10;                Log.e(TAG, &quot;Error fetching pokemon details: &quot; + t.getMessage());&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    public LiveData&lt;List&lt;Pokemon&gt;&gt; getPokemons() {&#10;        return pokemons;&#10;    }&#10;&#10;    public LiveData&lt;Boolean&gt; getIsLoading() {&#10;        return isLoading;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pokeinfo.ui.home;&#10;&#10;import android.app.Application;&#10;import android.util.Log;&#10;import androidx.lifecycle.AndroidViewModel;&#10;import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import com.example.pokeinfo.data.model.Pokemon;&#10;import com.example.pokeinfo.data.db.AppDatabase;&#10;import com.example.pokeinfo.data.api.PokemonApiService;&#10;import com.example.pokeinfo.data.api.PokemonListResponse;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;import retrofit2.Retrofit;&#10;import retrofit2.converter.moshi.MoshiConverterFactory;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;import java.util.concurrent.Executors;&#10;&#10;public class HomeViewModel extends AndroidViewModel {&#10;    private static final String TAG = &quot;HomeViewModel&quot;;&#10;    private final AppDatabase database;&#10;    private final PokemonApiService apiService;&#10;    private final MutableLiveData&lt;List&lt;Pokemon&gt;&gt; pokemons = new MutableLiveData&lt;&gt;();&#10;    private final MutableLiveData&lt;Boolean&gt; isLoading = new MutableLiveData&lt;&gt;(false);&#10;&#10;    public HomeViewModel(Application application) {&#10;        super(application);&#10;        database = AppDatabase.getInstance(application);&#10;&#10;        Retrofit retrofit = new Retrofit.Builder()&#10;            .baseUrl(&quot;https://pokeapi.co/api/v2/&quot;)&#10;            .addConverterFactory(MoshiConverterFactory.create())&#10;            .build();&#10;&#10;        apiService = retrofit.create(PokemonApiService.class);&#10;        loadInitialPokemonList();&#10;    }&#10;&#10;    private void loadInitialPokemonList() {&#10;        isLoading.setValue(true);&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            List&lt;Pokemon&gt; cachedPokemons = database.pokemonDao().getAllPokemonsSync();&#10;            if (cachedPokemons != null &amp;&amp; !cachedPokemons.isEmpty()) {&#10;                pokemons.postValue(cachedPokemons);&#10;                isLoading.postValue(false);&#10;            } else {&#10;                fetchFromApi(20, 0);&#10;            }&#10;        });&#10;    }&#10;&#10;    public void searchPokemons(String query) {&#10;        if (query == null || query.trim().isEmpty()) {&#10;            loadInitialPokemonList();&#10;            return;&#10;        }&#10;&#10;        isLoading.setValue(true);&#10;&#10;        // First search in local database&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            List&lt;Pokemon&gt; localResults = database.pokemonDao().searchPokemonsSync(&quot;%&quot; + query + &quot;%&quot;);&#10;            pokemons.postValue(localResults);&#10;&#10;            // If no local results, search in API&#10;            if (localResults == null || localResults.isEmpty()) {&#10;                searchInApi(query);&#10;            } else {&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void searchInApi(String query) {&#10;        apiService.getPokemonDetails(query.toLowerCase()).enqueue(new Callback&lt;Pokemon&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Pokemon&gt; call, Response&lt;Pokemon&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    Pokemon pokemon = response.body();&#10;                    Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                        database.pokemonDao().insertAll(java.util.Collections.singletonList(pokemon));&#10;                        pokemons.postValue(java.util.Collections.singletonList(pokemon));&#10;                    });&#10;                }&#10;                isLoading.postValue(false);&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Pokemon&gt; call, Throwable t) {&#10;                Log.e(TAG, &quot;Error searching pokemon in API: &quot; + t.getMessage());&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void fetchFromApi(int limit, int offset) {&#10;        apiService.getPokemonList(limit, offset).enqueue(new Callback&lt;PokemonListResponse&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;PokemonListResponse&gt; call, Response&lt;PokemonListResponse&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    for (PokemonListResponse.PokemonListItem item : response.body().getResults()) {&#10;                        fetchPokemonDetails(item.getName());&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;PokemonListResponse&gt; call, Throwable t) {&#10;                Log.e(TAG, &quot;Error fetching pokemon list: &quot; + t.getMessage());&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void fetchPokemonDetails(String name) {&#10;        apiService.getPokemonDetails(name).enqueue(new Callback&lt;Pokemon&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Pokemon&gt; call, Response&lt;Pokemon&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    Pokemon pokemon = response.body();&#10;                    Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                        database.pokemonDao().insertAll(java.util.Collections.singletonList(pokemon));&#10;                        // Update the LiveData with all cached pokemons&#10;                        pokemons.postValue(database.pokemonDao().getAllPokemonsSync());&#10;                    });&#10;                }&#10;                isLoading.postValue(false);&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Pokemon&gt; call, Throwable t) {&#10;                Log.e(TAG, &quot;Error fetching pokemon details: &quot; + t.getMessage());&#10;                isLoading.postValue(false);&#10;            }&#10;        });&#10;    }&#10;&#10;    public LiveData&lt;List&lt;Pokemon&gt;&gt; getPokemons() {&#10;        return pokemons;&#10;    }&#10;&#10;    public LiveData&lt;Boolean&gt; getIsLoading() {&#10;        return isLoading;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_back.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_back.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_favorite.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_favorite.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M12,21.35l-1.45,-1.32C5.4,15.36 2,12.28 2,8.5 2,5.42 4.42,3 7.5,3c1.74,0 3.41,0.81 4.5,2.09C13.09,3.81 14.76,3 16.5,3 19.58,3 22,5.42 22,8.5c0,3.78 -3.4,6.86 -8.55,11.54L12,21.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_favorite_border.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_favorite_border.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M16.5,3c-1.74,0 -3.41,0.81 -4.5,2.09C10.91,3.81 9.24,3 7.5,3 4.42,3 2,5.42 2,8.5c0,3.78 3.4,6.86 8.55,11.54L12,21.35l1.45,-1.32C18.6,15.36 22,12.28 22,8.5 22,5.42 19.58,3 16.5,3zM12.1,18.55l-0.1,0.1 -0.1,-0.1C7.14,14.24 4,11.39 4,8.5 4,6.5 5.5,5 7.5,5c1.54,0 3.04,0.99 3.57,2.36h1.87C13.46,5.99 14.96,5 16.5,5c2,0 3.5,1.5 3.5,3.5 0,2.89 -3.14,5.74 -7.9,10.05z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/nav_host_fragment&quot;&#10;        android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottom_nav&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:defaultNavHost=&quot;true&quot;&#10;        app:navGraph=&quot;@navigation/nav_graph&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;        android:id=&quot;@+id/bottom_nav&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;0dp&quot;&#10;        android:layout_marginEnd=&quot;0dp&quot;&#10;        android:background=&quot;?android:attr/windowBackground&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:menu=&quot;@menu/bottom_nav_menu&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/nav_host_fragment&quot;&#10;        android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/bottom_nav&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:defaultNavHost=&quot;true&quot;&#10;        app:navGraph=&quot;@navigation/nav_graph&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.bottomnavigation.BottomNavigationView&#10;        android:id=&quot;@+id/bottom_nav&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;0dp&quot;&#10;        android:layout_marginEnd=&quot;0dp&quot;&#10;        android:background=&quot;?android:attr/windowBackground&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:menu=&quot;@menu/bottom_nav_menu&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_favorites.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_favorites.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/favorite_recycler_view&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/empty_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;No favorite Pokemon yet&quot;&#10;        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/favorite_recycler_view&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/empty_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;No favorite Pokemon yet&quot;&#10;        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:id=&quot;@+id/search_layout&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:hint=&quot;Search Pokemon&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/search_edit_text&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:imeOptions=&quot;actionSearch&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:maxLines=&quot;1&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/pokemon_recycler_view&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/search_layout&quot; /&gt;&#10;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progress_bar&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_pokemon_details.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_pokemon_details.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.appbar.MaterialToolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#10;            app:menu=&quot;@menu/menu_details&quot;&#10;            app:navigationIcon=&quot;@drawable/ic_back&quot;&#10;            app:titleTextColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/pokemon_image&quot;&#10;                android:layout_width=&quot;200dp&quot;&#10;                android:layout_height=&quot;200dp&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                tools:src=&quot;@tools:sample/avatars&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/pokemon_name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_image&quot;&#10;                tools:text=&quot;Pikachu&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.ChipGroup&#10;                android:id=&quot;@+id/type_chip_group&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_name&quot; /&gt;&#10;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#13;&#10;&#13;&#10;        &lt;com.google.android.material.appbar.MaterialToolbar&#13;&#10;            android:id=&quot;@+id/toolbar&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#13;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#13;&#10;            app:navigationIcon=&quot;@drawable/ic_back&quot;&#13;&#10;            app:titleTextColor=&quot;@android:color/white&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#13;&#10;&#13;&#10;    &lt;androidx.core.widget.NestedScrollView&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#13;&#10;&#13;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:id=&quot;@+id/pokemon_image&quot;&#13;&#10;                android:layout_width=&quot;200dp&quot;&#13;&#10;                android:layout_height=&quot;200dp&quot;&#13;&#10;                android:scaleType=&quot;centerCrop&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot;&#13;&#10;                tools:src=&quot;@tools:sample/avatars&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/pokemon_name&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;16dp&quot;&#13;&#10;                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_image&quot;&#13;&#10;                tools:text=&quot;Pikachu&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.chip.ChipGroup&#13;&#10;                android:id=&quot;@+id/type_chip_group&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;8dp&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_name&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;com.google.android.material.button.MaterialButton&#13;&#10;                android:id=&quot;@+id/favorite_button&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;16dp&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/type_chip_group&quot;&#13;&#10;                tools:text=&quot;Add to Favorites&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#13;&#10;&#13;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#13;&#10;&#13;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_pokemon.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_pokemon.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/pokemon_image&quot;&#10;            android:layout_width=&quot;120dp&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            tools:src=&quot;@tools:sample/avatars&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/pokemon_name&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;            android:transformPivotX=&quot;0dp&quot;&#10;            android:transformPivotY=&quot;0dp&quot;&#10;            android:textAllCaps=&quot;true&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_image&quot;&#10;            tools:text=&quot;Pikachu&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.chip.ChipGroup&#10;            android:id=&quot;@+id/type_chip_group&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_name&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/pokemon_image&quot;&#10;            android:layout_width=&quot;120dp&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            tools:src=&quot;@tools:sample/avatars&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/pokemon_name&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;            android:textAllCaps=&quot;true&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_image&quot;&#10;            tools:text=&quot;Pikachu&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.chip.ChipGroup&#10;            android:id=&quot;@+id/type_chip_group&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/pokemon_name&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/bottom_nav_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/bottom_nav_menu.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/homeFragment&quot;&#10;        android:icon=&quot;@drawable/ic_home&quot;&#10;        android:title=&quot;Home&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/favoritesFragment&quot;&#10;        android:icon=&quot;@drawable/ic_favorite&quot;&#10;        android:title=&quot;Favorites&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_details.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_details.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_favorite&quot;&#10;        android:icon=&quot;@drawable/ic_favorite_border&quot;&#10;        android:title=&quot;Favorite&quot;&#10;        app:showAsAction=&quot;always&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/homeFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/homeFragment&quot;&#10;        android:name=&quot;com.example.pokeinfo.ui.home.HomeFragment&quot;&#10;        android:label=&quot;Pokemon List&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_home_to_details&quot;&#10;            app:destination=&quot;@id/detailsFragment&quot;&#10;            app:enterAnim=&quot;@anim/nav_default_enter_anim&quot;&#10;            app:exitAnim=&quot;@anim/nav_default_exit_anim&quot;&#10;            app:popEnterAnim=&quot;@anim/nav_default_pop_enter_anim&quot;&#10;            app:popExitAnim=&quot;@anim/nav_default_pop_exit_anim&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/detailsFragment&quot;&#10;        android:name=&quot;com.example.pokeinfo.ui.details.PokemonDetailsFragment&quot;&#10;        android:label=&quot;Pokemon Details&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;pokemonName&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/favoritesFragment&quot;&#10;        android:name=&quot;com.example.pokeinfo.ui.favorites.FavoritesFragment&quot;&#10;        android:label=&quot;Favorites&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_favorites_to_details&quot;&#10;            app:destination=&quot;@id/detailsFragment&quot;&#10;            app:enterAnim=&quot;@anim/nav_default_enter_anim&quot;&#10;            app:exitAnim=&quot;@anim/nav_default_exit_anim&quot;&#10;            app:popEnterAnim=&quot;@anim/nav_default_pop_enter_anim&quot;&#10;            app:popExitAnim=&quot;@anim/nav_default_pop_exit_anim&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&lt;/navigation&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:id=&quot;@+id/nav_graph&quot;&#13;&#10;    app:startDestination=&quot;@id/homeFragment&quot;&gt;&#13;&#10;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/homeFragment&quot;&#13;&#10;        android:name=&quot;com.example.pokeinfo.ui.home.HomeFragment&quot;&#13;&#10;        android:label=&quot;Pokemon List&quot;&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_home_to_details&quot;&#13;&#10;            app:destination=&quot;@id/detailsFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/detailsFragment&quot;&#13;&#10;        android:name=&quot;com.example.pokeinfo.ui.details.PokemonDetailsFragment&quot;&#13;&#10;        android:label=&quot;Pokemon Details&quot;&gt;&#13;&#10;        &lt;argument&#13;&#10;            android:name=&quot;pokemonName&quot;&#13;&#10;            app:argType=&quot;string&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/favoritesFragment&quot;&#13;&#10;        android:name=&quot;com.example.pokeinfo.ui.favorites.FavoritesFragment&quot;&#13;&#10;        android:label=&quot;Favorites&quot;&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_favorites_to_details&quot;&#13;&#10;            app:destination=&quot;@id/detailsFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&lt;/navigation&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="buildscript {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;    dependencies {&#10;        classpath(&quot;com.android.tools.build:gradle:8.1.0&quot;)&#10;    }&#10;}&#10;&#10;// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete::class) {&#10;    delete(rootProject.buildDir)&#10;}&#10;" />
              <option name="updatedContent" value="buildscript {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;    dependencies {&#10;        classpath(&quot;com.android.tools.build:gradle:8.1.0&quot;)&#10;        classpath(&quot;androidx.navigation:navigation-safe-args-gradle-plugin:2.7.6&quot;)&#10;    }&#10;}&#10;&#10;// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete::class) {&#10;    delete(rootProject.buildDir)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;core-ktx = &quot;1.12.0&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.11.0&quot;&#10;constraintlayout = &quot;2.1.4&quot;&#10;lifecycle = &quot;2.7.0&quot;&#10;room = &quot;2.6.1&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;moshi = &quot;1.15.0&quot;&#10;coil = &quot;2.5.0&quot;&#10;navigation = &quot;2.7.6&quot;&#10;coroutines = &quot;1.7.3&quot;&#10;navigation-fragment = &quot;2.9.3&quot;&#10;navigation-ui = &quot;2.9.3&quot;&#10;glide = &quot;4.16.0&quot;&#10;&#10;[libraries]&#10;core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;core-ktx&quot; }&#10;appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;lifecycle-viewmodel-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-ktx&quot;, version.ref = &quot;lifecycle&quot; }&#10;lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycle&quot; }&#10;room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit-moshi = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-moshi&quot;, version.ref = &quot;retrofit&quot; }&#10;moshi = { group = &quot;com.squareup.moshi&quot;, name = &quot;moshi-kotlin&quot;, version.ref = &quot;moshi&quot; }&#10;coil = { group = &quot;io.coil-kt&quot;, name = &quot;coil&quot;, version.ref = &quot;coil&quot; }&#10;navigation-fragment = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-fragment-ktx&quot;, version.ref = &quot;navigation&quot; }&#10;navigation-ui = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-ui-ktx&quot;, version.ref = &quot;navigation&quot; }&#10;coroutines-android = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-android&quot;, version.ref = &quot;coroutines&quot; }&#10;androidx-navigation-fragment = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-fragment&quot;, version.ref = &quot;navigation-fragment&quot; }&#10;androidx-navigation-ui = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-ui&quot;, version.ref = &quot;navigation-ui&quot; }&#10;glide = { group = &quot;com.github.bumptech.glide&quot;, name = &quot;glide&quot;, version.ref = &quot;glide&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version = &quot;8.2.0&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version = &quot;1.9.20&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.11.0&quot;&#10;constraintlayout = &quot;2.1.4&quot;&#10;lifecycle = &quot;2.7.0&quot;&#10;room = &quot;2.6.1&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;moshi = &quot;1.15.0&quot;&#10;navigation = &quot;2.7.6&quot;&#10;glide = &quot;4.16.0&quot;&#10;&#10;[libraries]&#10;appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;constraintlayout = { group = &quot;androidx.constraintlayout&quot;, name = &quot;constraintlayout&quot;, version.ref = &quot;constraintlayout&quot; }&#10;lifecycle-viewmodel = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel&quot;, version.ref = &quot;lifecycle&quot; }&#10;lifecycle-runtime = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime&quot;, version.ref = &quot;lifecycle&quot; }&#10;&#10;# Room&#10;room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;&#10;# Retrofit + Moshi&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit-moshi = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-moshi&quot;, version.ref = &quot;retrofit&quot; }&#10;moshi = { group = &quot;com.squareup.moshi&quot;, name = &quot;moshi&quot;, version.ref = &quot;moshi&quot; }&#10;moshi-adapters = { group = &quot;com.squareup.moshi&quot;, name = &quot;moshi-adapters&quot;, version.ref = &quot;moshi&quot; }&#10;&#10;# Navigation&#10;navigation-fragment = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-fragment&quot;, version.ref = &quot;navigation&quot; }&#10;navigation-ui = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-ui&quot;, version.ref = &quot;navigation&quot; }&#10;&#10;# Glide&#10;glide = { group = &quot;com.github.bumptech.glide&quot;, name = &quot;glide&quot;, version.ref = &quot;glide&quot; }&#10;glide-compiler = { group = &quot;com.github.bumptech.glide&quot;, name = &quot;compiler&quot;, version.ref = &quot;glide&quot; }&#10;&#10;# Testing&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version = &quot;4.13.2&quot; }&#10;ext-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version = &quot;1.1.5&quot; }&#10;espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version = &quot;3.5.1&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version = &quot;8.2.0&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>